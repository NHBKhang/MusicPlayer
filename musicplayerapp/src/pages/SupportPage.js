import React, { useEffect, useRef, useState } from 'react';
import '../styles/SupportPage.css';
import API, { endpoints } from '../configs/API';
import { usePageTitle } from '../components/PageTitle';

const SupportPage = () => {
    usePageTitle("H·ªó tr·ª£");
    const [searchQuery, setSearchQuery] = useState('');

    const handleSearch = (event) => {
        setSearchQuery(event.target.value);
    };

    return (
        <SupportContainer>
            <div className="support-page-container">
                <img
                    src='/space-laptop.jpg'
                    alt='support-bg'
                    className='support-image' />
                {/* Thanh t√¨m ki·∫øm */}
                <section className="search-section">
                    <h1 className="main-title">Ch√∫ng t√¥i c√≥ th·ªÉ gi√∫p g√¨?</h1>
                    <input
                        type="text"
                        placeholder="T√¨m c√¢u tr·∫£ l·ªùi"
                        value={searchQuery}
                        onChange={handleSearch}
                        className="search-input"
                    />
                </section>

                {/* C√°c danh m·ª•c h·ªó tr·ª£ */}
                <section className="categories-section">
                    <h2 className="section-title">Ch·ªß ƒë·ªÅ ph·ªï bi·∫øn</h2>
                    <div className="category-list">
                        <div className="category-item">
                            <h3 className="category-title">T√†i kho·∫£n c·ªßa b·∫°n</h3>
                            <p className="category-description">T√¨m hi·ªÉu c√°ch qu·∫£n l√Ω c√†i ƒë·∫∑t t√†i kho·∫£n c·ªßa b·∫°n.</p>
                        </div>
                        <div className="category-item">
                            <h3 className="category-title">T·∫£i l√™n & Chia s·∫ª</h3>
                            <p className="category-description">T√¨m hi·ªÉu c√°ch t·∫£i l√™n v√† chia s·∫ª c√°c b·∫£n nh·∫°c c·ªßa b·∫°n.</p>
                        </div>
                        <div className="category-item">
                            <h3 className="category-title">Thanh to√°n</h3>
                            <p className="category-description">Qu·∫£n l√Ω c√°c ƒëƒÉng k√Ω v√† ph∆∞∆°ng th·ª©c thanh to√°n c·ªßa b·∫°n.</p>
                        </div>
                        <div className="category-item">
                            <h3 className="category-title">B·∫£n quy·ªÅn</h3>
                            <p className="category-description">Hi·ªÉu v·ªÅ c√°c v·∫•n ƒë·ªÅ v√† ch√≠nh s√°ch b·∫£n quy·ªÅn.</p>
                        </div>
                        <div className="category-item">
                            <h3 className="category-title">·ª®ng d·ª•ng di ƒë·ªông</h3>
                            <p className="category-description">T√¨m hi·ªÉu v·ªÅ vi·ªác s·ª≠ d·ª•ng SoundCloud tr√™n thi·∫øt b·ªã di ƒë·ªông c·ªßa b·∫°n.</p>
                        </div>
                    </div>
                </section>

                {/* C√¢u h·ªèi th∆∞·ªùng g·∫∑p (FAQ) */}
                <section className="faq-section">
                    <div className='faq-header'>
                        <h2 className="section-title">C√¢u H·ªèi Th∆∞·ªùng G·∫∑p</h2>
                        <a href='/support/faq/'>Xem th√™m...</a>
                    </div>
                    <div className="faq-item">
                        <h3 className="faq-question">L√†m th·∫ø n√†o ƒë·ªÉ t√¥i ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u c·ªßa m√¨nh?</h3>
                        <p className="faq-answer">
                            B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u b·∫±ng c√°ch nh·∫•p v√†o "Qu√™n M·∫≠t Kh·∫©u" tr√™n trang ƒëƒÉng nh·∫≠p.
                        </p>
                    </div>
                    <div className="faq-item">
                        <h3 className="faq-question">L√†m th·∫ø n√†o t√¥i c√≥ th·ªÉ t·∫£i l√™n m·ªôt b·∫£n nh·∫°c?</h3>
                        <p className="faq-answer">
                            B·∫°n c√≥ th·ªÉ t·∫£i l√™n m·ªôt b·∫£n nh·∫°c b·∫±ng c√°ch nh·∫•p v√†o n√∫t "T·∫£i L√™n" ·ªü ph√≠a tr√™n m√†n h√¨nh c·ªßa b·∫°n.
                        </p>
                    </div>
                    <div className="faq-item">
                        <h3 className="faq-question">L√†m th·∫ø n√†o t√¥i c√≥ th·ªÉ qu·∫£n l√Ω c√°c ƒëƒÉng k√Ω Premium c·ªßa m√¨nh?</h3>
                        <p className="faq-answer">
                            V√†o c√†i ƒë·∫∑t t√†i kho·∫£n c·ªßa b·∫°n ƒë·ªÉ qu·∫£n l√Ω v√† c·∫≠p nh·∫≠t c√°c ƒëƒÉng k√Ω Premium c·ªßa b·∫°n.
                        </p>
                    </div>
                </section>
            </div>
        </SupportContainer>
    );
};

export const SupportContainer = ({ children }) => {
    const [isChatOpen, setIsChatOpen] = useState(false);

    const toggleChatBox = () => {
        setIsChatOpen(!isChatOpen);
    };

    return (
        <div>
            <Header />
            <div className='support-container'>{children}</div>
            <Footer />
            <button className="toggle-chat-btn" onClick={toggleChatBox}>
                <div className="toggle-icon">
                    <img
                        width={35} height={35}
                        src='/echo_ai.png'
                        alt='Echo'
                        className={`chat-icon ${isChatOpen ? 'hidden' : 'visible'}`} />
                    <i
                        className={`fa fa-times close-icon ${isChatOpen ? 'visible' : 'hidden'}`}
                        aria-hidden="true" />
                </div>
            </button>

            <div className={`${isChatOpen ? 'open' : ''}`}>
                <ChatBox />
            </div>
        </div>
    )
};

const Header = () => {
    return (
        <header className="header-container">
            <a className="logo" href='/'>
                <img src="/logo.png" height={35} className="me-2 ms-1" alt="logo" />
                <h1>SoundScape</h1>
            </a>
            <nav className="nav-links">
                <a href="/support">Trang ch·ªß</a>
                <a href="/support/feedback/">Ph·∫£n h·ªìi</a>
                <a href="/support/ticket/">Phi·∫øu H·ªó Tr·ª£</a>
            </nav>
        </header>
    );
};

const Footer = () => {
    return (
        <footer className="footer-container">
            <div className="footer-links">
                <a href="/terms">Terms of Service</a>
                <a href="/privacy">Privacy Policy</a>
            </div>
            <p className="footer-copyright">
                ¬© 2024 SoundScape. All rights reserved.
            </p>
        </footer>
    );
};

const ChatBox = () => {
    const [messages, setMessages] = useState([
        { id: 1, text: 'Xin ch√†o!', sender: 'bot' },
        { id: 2, text: "T√™n t√¥i l√† Echo, t√¥i l√† bot h·ªó tr·ª£ c·ªßa SoundScape ü§ñ", sender: 'bot' },
        { id: 3, text: 'H√¥m nay t√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?', sender: 'bot' },
    ]);
    const [inputMessage, setInputMessage] = useState('');
    const [loading, setLoading] = useState(false);
    const messagesRef = useRef(null);

    const handleSendMessage = async () => {
        if (inputMessage.trim()) {
            const newMessage = { id: messages.length + 1, text: inputMessage, sender: 'user' };
            setMessages([...messages, newMessage]);
            setInputMessage('');
            setLoading(true);

            try {
                let res = await API.post(endpoints['dialogflow-response'],
                    { message: inputMessage });

                const botResponse = res.data;
                const botMessage = { id: messages.length + 2, text: botResponse.response, sender: 'bot' }; // T·∫°o tin nh·∫Øn bot
                setMessages(prevMessages => [...prevMessages, botMessage]);
            } catch (error) {
                console.error(error);
            } finally {
                setLoading(false);
            }
        }
    };

    const handleKeyDown = (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            handleSendMessage();
        }
    };

    useEffect(() => {
        if (messagesRef.current) {
            messagesRef.current.scrollTop = messagesRef.current.scrollHeight;
        }
    }, [messages]);

    return (
        <div className="chat-box">
            <div className="chat-header">
                <img src='/logo.png' alt='Echo' width={35} height={35} className='bot-logo me-2 bg-none' />
                Echo Support AI
            </div>

            <div className="chat-messages" ref={messagesRef}>
                {messages.map((message, index) => {
                    const isUserMessage = message.sender === 'user';
                    const isBotMessage = message.sender === 'bot';
                    const isLastBotMessage = isBotMessage && (index === messages.length - 1 || messages[index + 1].sender !== 'bot');

                    return (
                        <div key={message.id} className={`chat-message-container ${isUserMessage ? 'user-message' : 'bot-message'}`}>
                            {isLastBotMessage && isBotMessage && (
                                <img src='/echo_ai.png' alt='Echo' className="bot-logo" height={30} width={30} />
                            )}
                            <div className={`chat-message ${isBotMessage && !isLastBotMessage && 'no-logo'}`}>
                                {message.text}
                            </div>
                        </div>
                    );
                })}

                {/* Hi·ªÉn th·ªã loading n·∫øu ƒëang ch·ªù ph·∫£n h·ªìi t·ª´ bot */}
                {loading && (
                    <div className="chat-message-container bot-message">
                        <img src='/echo_ai.png' alt='Echo' className="bot-logo" height={30} width={30} />
                        <div className="loading-message">ƒêang so·∫°n tin nh·∫Øn...</div>
                    </div>
                )}
            </div>

            <div className="chat-input-container">
                <input
                    type="text"
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    onKeyDown={handleKeyDown}
                    placeholder="Nh·∫≠p tin nh·∫Øn..."
                    className="chat-input" />
                <button onClick={handleSendMessage} className="send-button">
                    G·ª≠i
                </button>
            </div>
        </div>
    );
};

export default SupportPage;
